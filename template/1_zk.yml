AWSTemplateFormatVersion: 2010-09-09
Description: Launches a simple zk deployment. Note that this template is for demonstration purposes only and does not provide backup or persistence of any kind.

Parameters:
  Subnet:
    Type: AWS::EC2::Subnet::Id
  VpcId:
    Description: VPC associated with the provided subnets
    Type: AWS::EC2::VPC::Id
  InstanceSshCidr:
    Description: SSH access cidr for dev
    Type: String
  InstanceAmiId:
    Description: AMI (image) to use on EC2 instances.
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: c5.large
  InstanceKeyName:
    Description: Name of an EC2 key pair that can be used to connect to instances
    Type: String
  Instance0Ip:
    Description: Instance 0 ip
    Type: String
  Instance1Ip:
    Description: Instance 1 ip
    Type: String
  Instance2Ip:
    Description: Instance 2 ip
    Type: String
  Version:
    Description: Version of ZK to pull
    Type: String
    Default: '3.5.3-beta'
  MaxClients:
    Description: Max clients, should be at least <n peers> * <n vpeers>
    Type: Number
    Default: 30
Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ZK Instances
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        # TODO: Dev, remove
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref InstanceSshCidr
  InstanceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: InstanceSecurityGroup
      IpProtocol: "-1"
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: InstanceSecurityGroup

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: allow-describe-tags
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'ec2:DescribeTags'
                Resource: '*'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref InstanceRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref InstanceAmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref InstanceKeyName
        # SecurityGroupIds:
        #   - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
              #!/bin/bash -xe
              amazon-linux-extras install corretto8
              mkdir /tmp/zk
              cd /tmp/zk
              wget https://archive.apache.org/dist/zookeeper/zookeeper-${Version}/zookeeper-${Version}.tar.gz
              tar -xvf zookeeper-${Version}.tar.gz -C /
              cd /zookeeper-${Version}
              mkdir -p /var/lib/zookeeper

              echo 'Setting zk id'

              INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
              LOGICAL_NAME=$(aws ec2 describe-tags \
                --filters "Name=resource-id,Values=$INSTANCE_ID" \
                          "Name=key,Values=aws:cloudformation:logical-id" \
                --region=${AWS::Region} \
                --output=text | cut -f5)
              /opt/aws/bin/cfn-get-metadata \
                -s ${AWS::StackName} \
                -r $LOGICAL_NAME \
                --region ${AWS::Region} \
                -k zookeeper.myid > /var/lib/zookeeper/myid

              echo 'Writing config...'

              echo 'tickTime=2000'                                      >> conf/zoo.cfg
              echo 'dataDir=/var/lib/zookeeper'                         >> conf/zoo.cfg
              echo 'initLimit=5'                                        >> conf/zoo.cfg
              echo 'syncLimit=2'                                        >> conf/zoo.cfg
              echo 'maxClientCnxns=${MaxClients}'                       >> conf/zoo.cfg
              echo 'standaloneEnabled=false'                            >> conf/zoo.cfg
              echo 'reconfigEnabled=true'                               >> conf/zoo.cfg
              echo 'server.1=${Instance0Ip}:2888:3888:participant;2181' >> conf/zoo.cfg
              echo 'server.2=${Instance1Ip}:2888:3888:participant;2181' >> conf/zoo.cfg
              echo 'server.3=${Instance2Ip}:2888:3888:participant;2181' >> conf/zoo.cfg

              echo 'Starting ZK...'

              bin/zkServer.sh start

  Instance0:
    Type: AWS::EC2::Instance
    Metadata:
      zookeeper:
        myid: 1
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      NetworkInterfaces:
        - DeviceIndex: 0
          PrivateIpAddress: !Ref Instance0Ip
          SubnetId: !Ref Subnet
          GroupSet:
            - !Ref InstanceSecurityGroup

  Instance1:
    Type: AWS::EC2::Instance
    Metadata:
      zookeeper:
        myid: 2
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      NetworkInterfaces:
        - DeviceIndex: 0
          PrivateIpAddress: !Ref Instance1Ip
          SubnetId: !Ref Subnet
          GroupSet:
            - !Ref InstanceSecurityGroup

  Instance2:
    Type: AWS::EC2::Instance
    Metadata:
      zookeeper:
        myid: 3
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      NetworkInterfaces:
        - DeviceIndex: 0
          PrivateIpAddress: !Ref Instance2Ip
          SubnetId: !Ref Subnet
          GroupSet:
            - !Ref InstanceSecurityGroup
